//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Source/Input/PointNClickActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @PointNClickActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PointNClickActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PointNClickActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""673070c7-32b9-4e01-b4aa-27bf4f7d1ffb"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""bfa6dbc1-594a-4540-bb55-7498c764d400"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""58ae2dbb-2cb2-4537-8846-4511a390d383"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""ba40acdc-4e23-4bd9-8f00-1e9533323832"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1bf594ce-ef25-45dd-a141-e282dc60b44c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34d493a4-1765-4b44-94d7-704b72ac7b26"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7baad917-e27f-41bd-920e-a28d02d338fb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_Interact = m_Main.FindAction("Interact", throwIfNotFound: true);
            m_Main_Stop = m_Main.FindAction("Stop", throwIfNotFound: true);
            m_Main_Point = m_Main.FindAction("Point", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private IMainActions m_MainActionsCallbackInterface;
        private readonly InputAction m_Main_Interact;
        private readonly InputAction m_Main_Stop;
        private readonly InputAction m_Main_Point;
        public struct MainActions
        {
            private @PointNClickActions m_Wrapper;
            public MainActions(@PointNClickActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Main_Interact;
            public InputAction @Stop => m_Wrapper.m_Main_Stop;
            public InputAction @Point => m_Wrapper.m_Main_Point;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void SetCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterface != null)
                {
                    @Interact.started -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnInteract;
                    @Stop.started -= m_Wrapper.m_MainActionsCallbackInterface.OnStop;
                    @Stop.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnStop;
                    @Stop.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnStop;
                    @Point.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPoint;
                }
                m_Wrapper.m_MainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @Stop.started += instance.OnStop;
                    @Stop.performed += instance.OnStop;
                    @Stop.canceled += instance.OnStop;
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                }
            }
        }
        public MainActions @Main => new MainActions(this);
        public interface IMainActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnStop(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
        }
    }
}
